<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CordDis</title>
    <style>
        body { font-family: Arial, sans-serif; background: #fff; color: #000; transition: 0.3s; }
        .dark-mode { background: #121212; color: #fff; }
        .chat-container { width: 300px; margin: auto; }
        .message { display: flex; align-items: center; margin-bottom: 5px; }
        .message img { width: 40px; height: 40px; border-radius: 50%; margin-right: 10px; }
        .chat-box { height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; }
        .dark-mode .chat-box { border-color: #666; }
        .profile-settings { cursor: pointer; font-size: 20px; position: absolute; top: 10px; right: 10px; }
        #profileDiv { display: none; position: absolute; top: 50px; right: 10px; background: #fff; padding: 10px; border: 1px solid #ccc; }
        #profileDiv input { margin: 5px; }
    </style>
</head>
<body>
    <button onclick="toggleDarkMode()">Dark Mode</button>
    <div id="loginDiv">
        <h2>Login</h2>
        <input type="email" id="email" placeholder="Email">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
        <p id="loginError" style="color: red;"></p>
    </div>
    
    <div id="chatDiv" style="display:none;">
        <h2>Chat Room</h2>
        <div>
            <button onclick="switchRoom('general')">General</button>
            <button onclick="switchRoom('memes')">Memes</button>
            <button onclick="switchRoom('school')">School Chat</button>
            <button onclick="switchRoom('spam')">Spam</button>
            <button onclick="switchRoom('clever')">Clever</button>
        </div>
        <div class="chat-box" id="chatBox"></div>
        <input type="file" id="imageUpload">
        <input type="text" id="messageInput" placeholder="Type a message">
        <button onclick="sendMessage()">Send</button>
        <button onclick="openEmbed()">open in about:blank</button>
        <span class="profile-settings" onclick="showProfileSettings()">✏️</span>
    </div>

    <div id="profileDiv">
        <h3>Update Profile</h3>
        <input type="text" id="newName" placeholder="Enter new name">
        <input type="file" id="profilePic" accept="image/*">
        <button onclick="updateProfile()">Save</button>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-app.js";
        import { getAuth, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, doc, setDoc } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-firestore.js";
        
        const firebaseConfigAuth = {
            apiKey: "AIzaSyD_RU42yNMYtMWadeZnfmwBy3HMnEHyhWw",
            authDomain: "corddissignin.firebaseapp.com",
            projectId: "corddissignin",
        };
        
        const firebaseConfigChat = {
            apiKey: "AIzaSyCpoTflhDbxhKK-mJ_1hy__B8EBTeBsI3Y",
            authDomain: "cordischat.firebaseapp.com",
            projectId: "cordischat",
        };
        
        const authApp = initializeApp(firebaseConfigAuth, "authApp");
        const chatApp = initializeApp(firebaseConfigChat, "chatApp");
        
        const auth = getAuth(authApp);
        const db = getFirestore(chatApp);
        
        let currentRoom = 'general';
        let currentUser;
        
        window.login = function () {
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const loginError = document.getElementById('loginError');

            // Clear any previous error messages
            loginError.textContent = '';

            // Basic validation for email and password fields
            if (!email || !password) {
                loginError.textContent = "Please enter both email and password.";
                return;
            }

            // Basic email format validation
            const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            if (!emailRegex.test(email)) {
                loginError.textContent = "Please enter a valid email address.";
                return;
            }

            console.log("Attempting login with:", email);

            signInWithEmailAndPassword(auth, email, password)
                .then(userCredential => {
                    console.log("Login successful:", userCredential.user);
                    currentUser = userCredential.user;
                    document.getElementById('loginDiv').style.display = 'none';
                    document.getElementById('chatDiv').style.display = 'block';
                    loadMessages();
                })
                .catch(error => {
                    console.error("Login failed:", error.code, error.message);
                    loginError.textContent = "Login failed: " + error.message;
                });
        }
        
        window.sendMessage = function () {
            if (!currentUser) {
                alert("You must be logged in to send messages.");
                return;
            }
            
            const messageInput = document.getElementById('messageInput');
            if (!messageInput.value.trim()) return;
            addDoc(collection(db, currentRoom), {
                text: messageInput.value,
                user: currentUser.email,
                timestamp: new Date()
            })
            .then(() => console.log("Message sent successfully."))
            .catch(error => console.error("Error sending message:", error));
            
            messageInput.value = '';
        }
        
        window.loadMessages = function () {
            console.log("Loading messages for room:", currentRoom);
            
            const chatBox = document.getElementById('chatBox');
            chatBox.innerHTML = '';
            onSnapshot(collection(db, currentRoom), snapshot => {
                chatBox.innerHTML = '';
                const messages = snapshot.docs.map(doc => doc.data());
                messages.sort((a, b) => a.timestamp - b.timestamp); // Sort messages to show the oldest first
                messages.forEach(message => {
                    let div = document.createElement('div');
                    div.classList.add('message');
                    div.innerHTML = `<strong>${message.user}</strong>: ${message.text}`;
                    chatBox.appendChild(div);
                });
            });
        }
        
        window.switchRoom = function (room) {
            console.log("Switching to room:", room);
            currentRoom = room;
            loadMessages();
        }
        
        window.toggleDarkMode = function () {
            document.body.classList.toggle('dark-mode');
        }
        
        window.openEmbed = function () {
            const embedUrl = "https://inkboym.github.io/chat";
            const iframe = `<embed src="${embedUrl}" width="100%" height="500px">`;
            const newWindow = window.open();
            newWindow.document.write(iframe);
            newWindow.document.close();
        }

        window.showProfileSettings = function () {
            document.getElementById('profileDiv').style.display = 'block';
        }

        window.updateProfile = function () {
            const newName = document.getElementById('newName').value;
            const profilePic = document.getElementById('profilePic').files[0];
            
            if (newName) {
                setDoc(doc(db, "users", currentUser.uid), {
                    name: newName
                }, { merge: true });
            }

            if (profilePic) {
                const reader = new FileReader();
                reader.onloadend = function () {
                    setDoc(doc(db, "users", currentUser.uid), {
                        profilePic: reader.result
                    }, { merge: true });
                };
                reader.readAsDataURL(profilePic);
            }

            document.getElementById('profileDiv').style.display = 'none';
        }
    </script>
</body>
</html>
